---
import { main } from "datos.json";
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-bold rounded-full text-gray-200 justify-center items-center"
  >
    {
      main.map((menu) => (
        <div class="relative group md:p-2 p-0">
          <a
            class="relative block px-2 py-2 transition hover:text-red-400"
            aria-label={menu.name}
            href={menu.url}
          >
            {menu.name}
          </a>
          {menu.submain && menu.submain.length > 0 && (
            <ul class="absolute left-0 hidden mt-1 rounded-md shadow-lg group-hover:block">
              {menu.submain.map((subMenu) => (
                <li>
                  <a
                    class="block px-4 py-2 rounded text-gray-200 bg-gray-950 hover:bg-gray-700 hover:text-primary"
                    href={subMenu.url}
                  >
                    {subMenu.text}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </div>
      ))
    }
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500");
            } else {
              item.classList.remove("text-blue-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  nav {
    @apply bg-gray-800/90;
  }

  @keyframes nav-shadown {
    0% {
      @apply bg-gray-800/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }
</style>
